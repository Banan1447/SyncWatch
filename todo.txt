# TODO: Разработка прототипа системы синхронного просмотра видео

## Этап 1: Подготовка окружения (0.5 дня)
- [ ] Настроить проект:
  - Установить Python 3.10+
  - Создать виртуальное окружение `venv`
  - Установить зависимости: `fastapi`, `uvicorn`, `pydantic`
- [ ] Создать структуру проекта:
  - Добавить папки: `/static`, `/templates`, `/main.py`
  - Настроить статическую раздачу через FastAPI
- [ ] Инициализировать Git:
  - `.gitignore` (включить `venv/`, `*.pyc`)
  - Первый коммит: `Initial project setup`

---

## Этап 2: Базовый сервер и WebSocket (1 день)
- [ ] Реализовать WebSocket маршрут `/ws/{room_id}`
- [ ] Хранение комнат в памяти:
  - Создать глобальный объект `rooms: dict[str, list[WebSocket]]`
- [ ] Логика подключения:
  - При подключении: добавлять клиент в список комнаты
  - При отключении: удалять клиент из списка
- [ ] Рассылка команд:
  - При получении JSON (play/pause/seek) — отправлять всем участникам комнаты
  - Пример JSON: `{ "type": "play", "position": 123.4 }`

---

## Этап 3: Фронтенд (1 день)
- [ ] Главная страница (`index.html`):
  - Поле ввода ID комнаты
  - Кнопки "Создать комнату" / "Войти"
- [ ] Видео-плеер:
  - HTML5 `<video>` с поддержкой загрузки MP4
  - Добавить кнопки Play/Pause
- [ ] WebSocket клиент:
  - Подключение к `/ws/{room_id}`
  - Отправка событий при нажатии кнопок
  - Обработка входящих команд для синхронизации

---

## Этап 4: Синхронизация видео (0.5 дня)
- [ ] Обработка событий пользователя:
  - Отправлять команды на сервер при:
    - Нажатии Play/Pause
    - Изменении времени воспроизведения (`ontimeupdate`)
- [ ] Применение команд на клиенте:
  - Устанавливать `video.currentTime = position` при получении команды
- [ ] Защита от цикла:
  - Добавить флаг `fromServer` для исключения повторной отправки команд

---

## Этап 5: Тестирование и демонстрация (0.5 дня)
- [ ] Запустить сервер: `uvicorn main:app --reload`
- [ ] Проверить:
  - Создание/присоединение к комнате
  - Загрузка видео и синхронизация
  - Задержка < 500 мс
- [ ] Демонстрация:
  - Открыть два браузера → войти в одну комнату
  - Тестировать Play/Pause/Seek
  - Проверить подключение нового участника

---

## Дальнейшие шаги (после PoC)
- [ ] Добавить чат
- [ ] Интегрировать YouTube API
- [ ] Реализовать HLS-стриминг
- [ ] Внедрить аутентификацию и Redis для хранения комнат
