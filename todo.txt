надо Добавить
// server.js
const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const path = require('path');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'))); // Serve static files (optional)

// In-memory queue (in production, use Redis or DB)
let videoQueue = [];

// Extract YouTube video ID from any valid URL
function extractYouTubeId(url) {
  const regex = /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

// Broadcast updated queue to all connected clients
function broadcastQueueUpdate() {
  const message = JSON.stringify({ queue: videoQueue });
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  });
}

// API: Add video to queue
app.post('/api/add-video', (req, res) => {
  const { url } = req.body;

  if (!url || typeof url !== 'string') {
    return res.status(400).json({ error: 'Invalid or missing URL' });
  }

  const videoId = extractYouTubeId(url);
  if (!videoId) {
    return res.status(400).json({ error: 'Invalid YouTube URL' });
  }

  // Prevent duplicates
  if (videoQueue.includes(videoId)) {
    return res.status(400).json({ error: 'Video already in queue' });
  }

  videoQueue.push(videoId);
  console.log(`Added video to queue: ${videoId}`);
  broadcastQueueUpdate();

  res.status(200).json({ success: true, videoId });
});

// API: Get current queue
app.get('/api/video-queue', (req, res) => {
  res.json({ queue: videoQueue });
});

// WebSocket: Handle new connections
wss.on('connection', (ws, req) => {
  console.log('Client connected');

  // Send current queue on connection
  ws.send(JSON.stringify({ queue: videoQueue }));

  // Handle client disconnect
  ws.on('close', () => {
    console.log('Client disconnected');
  });
});

// Start server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

// Export for testing or modular use
module.exports = { videoQueue, extractYouTubeId, broadcastQueueUpdate };

прочти оригинальный server.js и добавь твои правки, после чего выдай полностью измененный server.js